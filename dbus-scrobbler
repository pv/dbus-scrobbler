#!/usr/bin/env perl

use strict;
use warnings;

use utf8;

use Net::DBus;
use Net::DBus::Reactor;
use LWP::UserAgent;
use Digest::MD5 'md5_hex';
use JSON::XS;
use URI;
use File::Slurp;
use File::Path qw/make_path/;
use File::Basename qw/dirname/;
use File::HomeDir qw/my_home/;
use Log::Any qw/$log/,
    filter => sub {
        my ($cat, $lvl, $msg) = @_;
        my $timestamp = strftime("%F %T", localtime);
        return "[$timestamp] $msg";
    };
use Log::Any::Adapter ('Stderr');
use POSIX qw/strftime/;

use Data::Dumper;

my $VERSION = '0.01_02';

my $lastfm_session_key;
my $sk_savefile = my_home() . '/.config/dbus-scrobbler/sessionkey';

my @_queue;

# Using Net::LastFMAPI's creds at the moment because
# https://www.last.fm/api/account/create isn't working right now.
my $lastfm_api_key = 'dfab9b1c7357c55028c84b9a8fb68880';
my $lastfm_secret  = 'd004c86dcfa8ef4c3977b04f558535f2';
my $lastfm_url     = 'https://ws.audioscrobbler.com/2.0/';

my $ua = new LWP::UserAgent(agent => "dbus-scrobbler/$VERSION");

my $prev_update      = '';
my $prev_update_time = strftime("%s", gmtime);

my $bus = Net::DBus->session;
my $player;

my $prev_scrobble = '';

sub connect_active_players {
    my $bus = shift;

    # Get list of players
    my $bus_service = $bus->get_service('org.freedesktop.DBus');
    my $bus_info = $bus_service->get_object('/', 'org.freedesktop.DBus');
    my @items;

    foreach my $item (@{$bus_info->ListNames}) {
        if ($item =~ /^org\.mpris\.MediaPlayer2\./) {
            push @items, $item;
        }
    }

    foreach my $item (@items) {
        setup_listener($item);
    }
}

# Connect any existing players
connect_active_players($bus);

# Wait for new players
my $session     = $bus->get_service('org.freedesktop.DBus');
my $session_obj = $session->get_object('/org/freedesktop/DBus');
$session_obj->connect_to_signal('NameOwnerChanged', \&handle_nameownerchanged);

# Run
$log->info("dbus-scrobbler started. Waiting for events...");
my $reactor = Net::DBus::Reactor->main();
$reactor->run;

exit 0;


sub load_save_sessionkey {
    my $key = shift;

    if (defined $key) {
        # Set a restrictive umask when (potentially) creating this file as
        # contents are sensitive.
        my $old_umask = umask;
        umask(0077);
        my $confdir = dirname($sk_savefile);
        if (! -d $confdir) {
            make_path($confdir);
        }
        write_file($sk_savefile, $key);
        umask($old_umask);
    } else {
        $key = eval { read_file($sk_savefile) };
    }

    $lastfm_session_key = $key;
}

sub handle_nameownerchanged {
    my ($name, $old_owner, $new_owner) = @_;

    return unless ($name =~ /^org\.mpris\.MediaPlayer2\./);
    return unless ($new_owner ne '');

    # XXX: Horrendous! But I don't know how to wait for a name to be ready for
    # listening to.
    sleep 2;

    eval {
        setup_listener($name);
    };

    if ($@) {
        $log->error("Doesn't look like that was a supported player: $@\n" . Dumper(@_));
    } else {
        $log->info("A new player $name seems to be running, connected.");
    }
}

sub setup_listener {
    my $interface = shift;
    my $player = $bus->get_service($interface);
    my $obj = $player->get_object('/org/mpris/MediaPlayer2',
        'org.freedesktop.DBus.Properties');
    $obj->connect_to_signal('PropertiesChanged', \&handle_propchange);
    $log->info("Connected to $interface...");
}

sub lastfm {
    my ($method, @params) = @_;
    $method = lc($method);

    my %params;
    my $i = 0;
    while (my $p = shift @params) {
        if (ref $p eq "HASH") {
            while (my ($k, $v) = each %{ $p }) {
                $params{$k . '[' . $i .']'} = $v;
            }
            $i++;
        } else {
            $params{$p} = shift @params;
        }
    }

    $params{method}  = $method;
    $params{api_key} = $lastfm_api_key;
    $params{format}  = 'json' unless $params{format};

    delete $params{format} if $params{format} && $params{format} eq "xml";

    lastfm_sessionise(\%params);
    lastfm_sign(\%params);

    my $res;

    # All the auth.* methods are GET whereas all the track.* methods are POST.
    if ($params{method} =~ /^track\./) {
        $res = $ua->post($lastfm_url, Content => \%params);
    } else {
        my $uri = URI->new($lastfm_url);
        $uri->query_form(%params);
        $res = $ua->get($uri);
    }

    $params{format} ||= "xml";

    my $content = $res->decoded_content;

    $log->info("Last.fm contains faulty data for a piece of data you requested"
    . " and is unable to return a useful reply. Will be treated as an"
    . " empty reply.") if ($content eq qq(""\n));

    my $decoded_json = sub { $content = decode_json($content); };

    if (not $res->is_success
            or ($params{format} eq 'json' and exists $decoded_json->()->{error})
            or ($params{format} eq 'xml' and $content !~ /<lfm status="ok">/)) {
        if ($res->is_success) {
            # Successful HTTP request but there was some problem with it.
            if ($res->decoded_content =~ /Invalid session key/) {
                $log->warning("Auth problem?");
            }
        }

        $content = Dumper($content);

        $log->warning(join("\n",
            "Something went wrong:",
            "HTTP status: " . $res->status_line,
            "",
            $content,
            "",
        ));
    }

    return $content;
}

sub lastfm_sessionise {
    my $params = shift;

    # Only do this if auth requested or required by method.
    unless ($params->{method} =~ /^track\./ or delete $params->{auth}) {
        return;
    }

    $params->{sk} = lastfm_get_session_key();
}

sub lastfm_get_session_key {
    # Try to load session key from the savefile.
    if (not defined $lastfm_session_key) {
        load_save_sessionkey();
    }

    # If that didn't work, request a new one. The user will need to visit a URL
    # and approve the application.
    if (not defined $lastfm_session_key) {
        my $key = lastfm_request_session();

        if (not defined $key) {
            $log->error("Failed to get a Last.fm session:\n$@");
            return undef;
        }

        load_save_sessionkey($key);
    }

    return $lastfm_session_key;
}

sub lastfm_request_session {
    my $res = lastfm("auth.gettoken", format => "xml");

    my $token;

    if ($res =~ m{<token>(.+)</token>}) {
        $token = $1;
    } else {
        $log->error("Auth token not found: $res");
        return undef;
    }

    print "You need to visit:\n";
    print 'https://www.last.fm/api/auth/?api_key=' . $lastfm_api_key
        . '&token=' . $token . "\n";
    print "Press Enter when you have done so and authorized this appâ€¦";
    <STDIN>;

    my $sess = lastfm("auth.getSession", token => $token, format => "xml");

    my ($username) = $sess =~ m{<name>(.+)</name>};
    my ($key) = $sess =~ m{<key>(.+)</key>};

    return $key;
}

sub lastfm_sign {
    my $params = shift;

    # Only do this for signed methods.
    return unless ($params->{method} =~ /^(auth|track)\./);

    # Sort hash keys by alpha, remove any "format" or "callback" parameters,
    # and then stuff it into a scalar.
    my $jumble = join '',
        map { $_ => $params->{$_} }
            grep { not ($_ eq 'format' or $_ eq 'callback') }
            sort keys %{ $params };

#    print "Jumble: $jumble\n";
#    print "Secret: $lastfm_secret\n";

    # Append our API secret and then hash that.
    my $hash = md5_hex($jumble . $lastfm_secret);

#    print "Hash: $hash\n";

    $params->{api_sig} = $hash;
}

sub handle_propchange {
    my ($self, $args) = @_;

    # Send queued scrobbles if any.
    dequeue_scrobbles();

    # Only care if track metadata is one of the things that has changed.
    if (not exists $args->{Metadata}) {
        return;
    }

    my $metadata = $args->{Metadata};

    my $now = strftime("%s", gmtime);

#    print Dumper($metadata), "\n";

    if (not exists $metadata->{'mpris:length'}) {
        $log->info("Track has no length so I can't scrobble it.");
        return;
    }

    # Length is in microseconds.
    $metadata->{length_secs} = int($metadata->{'mpris:length'} / 1_000_000);

    if ($metadata->{length_secs} <= 30) {
        $log->info('] Track length ' . $metadata->{length_secs}
            . "s <= 30 so not scrobbling.");
        return;
    }

    my $scrobble;

    # Sanity check supplied values.
    if (not exists $metadata->{'xesam:artist'}) {
        $log->info("Artist(s) must be supplied!");
        return;
    }

    $scrobble->{artist} = join(', ', @{ $metadata->{'xesam:artist'} });

    if (not exists $metadata->{'xesam:title'}) {
        $log->info("Track title must be supplied!");
        return;
    }

    $scrobble->{track} = $metadata->{'xesam:title'};

    # If trackNumber is there then it must be an integer above 0.
    if (exists $metadata->{'xesam:trackNumber'}) {
        my $num = $metadata->{'xesam:trackNumber'};

        if ($num =~ /^\d+/ and $num > 0) {
            $scrobble->{trackNumber} = $num;
        } else {
            $log->info("Track number must be a positive integer.");
        }
    }

    # album is optional.
    if (exists $metadata->{'xesam:album'}) {
        $scrobble->{album} = $metadata->{'xesam:album'};
    }

    $scrobble->{duration}  = $metadata->{'length_secs'};

    my $new_scrobble = ';' . $scrobble->{artist} . ';' . $scrobble->{track} . ';' . $scrobble->{album} . ';' . $scrobble->{duration};

    $scrobble->{timestamp} = $now;

    if ($new_scrobble ne $prev_scrobble) {
    	$prev_scrobble = $new_scrobble;

        my $res = lastfm('track.updateNowPlaying', %{ $scrobble });

        if (exists $res->{nowplaying}) {
	    $log->info('Successfully updated nowplaying: ' . $scrobble->{artist}
                . ' - ' . $scrobble->{track} . ".");
        }
    }
    else {
        $log->info('Not updating nowplaying (same as previous): ' . $scrobble->{artist}
                . ' - ' . $scrobble->{track} . ".");
    }

    # And now scrobble it as well.
    #
    # Scrobbles must only be sent after at least 50% of the track has played.
    # Rather than use timers we'll just keep the scrobble in a queue and
    # process it at the next track change (as that would mean this track has
    # finished).
    enqueue_scrobble($scrobble);
}

sub enqueue_scrobble {
    my ($scrobble) = @_;

    push(@_queue, $scrobble);
}

# If there are any scrobbles on the queue, send them all as long as there's no
# repeats.
sub dequeue_scrobbles {
    return unless scalar @_queue;

    my $now = strftime("%s", gmtime);

    my $cur_track = $prev_update;
    my $cur_start_time = $prev_update_time;

    while (@_queue) {
        my $scrobble = shift @_queue;

        if (!(defined $cur_track and $cur_track eq $scrobble->{track})) {
            $cur_start_time = $scrobble->{timestamp};
            $cur_track = $scrobble->{track};
        }

        if ($now - $cur_start_time < 0.4*$scrobble->{duration}) {
            $log->info('Track ' . $scrobble->{artist} . ' - '
                . $scrobble->{track} . " played less than 40% of duration, so"
                . " not scrobbling.");
            next;
        }

        if (defined $prev_update and $prev_update eq $scrobble->{track}) {
            # How long ago was it?
            my $delta = $now - $prev_update_time;

            if ($delta <= 30) {
	        $log->info('Identical track ' . $scrobble->{artist} . ' - '
                   . $scrobble->{track} . " played only $delta secs ago, so"
                   . " not scrobbling.");
                next;
            }

            $log->info("An identical track was played $delta secs ago but that's"
                . " long enough ago to allow a new scrobble.");
        }

        my $res = lastfm('track.scrobble', %{ $scrobble });

        if (exists $res->{scrobbles}
                and 1 == $res->{scrobbles}->{'@attr'}->{accepted}) {
            $log->info("Successfully scrobbled: " . $scrobble->{artist} . ' - '
            . $scrobble->{track} . ".");
        } else {
            $log->warning(Dumper $res);
        }

        # Record the track name and the time of update so we can avoid sending it
        # twice in quick succession.
        $prev_update_time = $scrobble->{timestamp};
        $prev_update      = $scrobble->{track};
    }
}

__END__

# Update README.pod from here with something like:
#
# podselect ./dbus-scrobbler > README.pod

=encoding utf8

=pod

=head1 NAME

dbus-scrobbler - scrobble from an MPRIS-compliant media player's D-Bus interface

=head1 SYNOPSIS

  ./dbus-scrobbler
  Now listening to org.mpris.MediaPlayer2.bansheeâ€¦
  [2015-08-23 10:35:51] Detected track change.
  You need to visit:
  https://www.last.fm/api/auth/?api_key=dfab9b1c7357c55028c84b9a8fb68880&token=b4fb0bd84f55ce143885a31756cc859c
  Press Enter when you have done so and authorized this appâ€¦
  [2015-08-23 10:36:18] Successfully updated nowplaying: Pet Shop Boys - Left to My Own Devices.
  [2015-08-23 10:36:18] Detected track change.
  [2015-08-23 10:36:18] Successfully scrobbled: Pet Shop Boys - Left to My Own Devices.
  [2015-08-23 10:40:40] Detected track change.
  [2015-08-23 10:40:41] Successfully updated nowplaying: Pet Shop Boys - Where the Streets Have No Name.

=head1 DESCRIPTION

I noticed that scrobbling from my media player (Banshee) broke a few weeks ago.
Banshee is written in Mono, which I have no idea about, and I'm pretty sure the
problem is with Banshee, not Last.fm (although Last.fm B<did> change their site
around).

Many modern media players such as Banshee, VLC, Audacity, XMMS2, Spotify, â€¦ now
support a thing called the Multimedia Player Remote Interfacing Specification
(MPRIS). It's a D-Bus interface so that third-party programs can control and
inspect the media players in some documented way. I decided to use it to
scrobble from. That's what this does.

B<dbus-scrobbler>:

=over 4

=item * Looks on your user session's D-Bus for existing processes to listen to.

=item * Wait for any new processes to appear.

=item * Asks for authorization with Last.fm the first time this is necessary.

You'll be asked to visited the Last.fm site to authorize this application. This
session key will be cached on the filesystem forever, so you should only need
to do this once.

=item * Updates the currently playing track on each track change and then scrobbles the previous track.

=back

=head1 SESSION KEY AND AUTHORIZATION

Updating the currently-playing track and scrobbling a track both require
authorization with Last.fm's API. The first time that B<dbus-scrobbler> is run
and has occasion to send an update to Last.fm, it will look for the
B<File::HomeDir::my_home()/.config/dbus-scrobbler/sessionkey> file.

If this doesn't exist or is empty then a URL for the user to authorize the app
will be printed, and (assuming successful authorization then takes place), the
resulting session key will be stored in the file. As this session key is valid
for an infinite period of time and allows modification of your Last.fm account
you should keep it safe.

If you need to force a re-authorization then you could delete the
B<File::HomeDir::my_home()/.config/dbus-scrobbler/sessionkey> file.

=head1 TECHNICAL DETAILS

=head2 D-Bus Interaction

B<dbus-scrobbler> initially connects to your user's session D-Bus and looks for
bus names B<org.mpris.Mediaplayer2.*>. As per the MPRIS specification,
each media player should request a unique bus name which begins with
B<org.mpris.MediaPlayer2>.

B<dbus-scrobbler> also connects to the
B<org.freedesktop.DBus.NameOwnerChanged> signal to wait until a media player
becomes available.

Once available, the B</org/mpris/MediaPlayer2> object is used to connect to the
B<org.freedesktop.DBus.Properties.PropertiesChanged> signal. This signal fires
when the track changes (and when other events happen) and delivers a hash
reference that looks like this:

    {
        'Metadata' => {
            'mpris:trackid'     => '/org/bansheeproject/Banshee/Track/11334727',
            'xesam:url'         => 'file:///srv/specialbrew.localnet/srv/tank/Sounds/Songs/Andy/Lossy/Justice%20Vs%20Simian/Playlist_%20Dance/02%20-%20We%20Are%20Your%20Friends%20(Radio%20Edit).mp3',
            'xesam:genre'       => [
                'Pop',
            ],
            'xesam:albumArtist' => [
                'Various Artists',
            ],
            'xesam:album'       => 'Playlist: Dance',
            'mpris:artUrl'      => 'file:///home/andy/.cache/media-art/album-8bbcd5e02f50ce9e5c74c93bdae8b372.jpg',
            'xesam:title'       => 'We Are Your Friends (Radio Edit)',
            'mpris:length'      => 159739000,
            'xesam:trackNumber' => 2,
            'xesam:artist'      => [
                'Justice Vs Simian',
            ],
        },
    },

=head1 SEE ALSO

L<Net::LastFMAPI>, from which all of the code for interacting with Last.fm's
API was stolen.

=head1 BUGS

Some of the most egregious shortcomings:

=over 4

=item * Should run as a daemon.

It really shouldn't be foreground on the terminal. It should be automatically
launched by the user's login process.

=item * Should have proper logging.

Instead of a bunch of crappy prints this should really have logging with
multiple priorities, possibly to syslog, and at least with an option to run in
foreground and log to stderr.

=item * D-Bus stuff could no doubt be better.

I've knocked this together in one evening because my scrobbling was broken. I
didn't know anything about D-Bus before that, other than that it's a message
bus. So the chances are I have done some really stupid things.

=item * Should use own API credentials.

Last.fm's API key application page was broken when I was writing this, so I
just copied Net::LastFMAPI's credentials. That works fine but I should really
use proper credentials once the page works again.

=item * Does not retry on transient errors.

A proper scrobbler would queue scrobbles to disk if they couldn't be submitted,
in order to retry them later. At the moment B<dbus-scrobbler> just throws them
away.

=item * Should be kinder to Last.fm.

Last.fm's API documentation says that scrobbles should only be submitted after
50% of the track has played, or 4 minutes has elapsed, whichever comes first.
There are a couple of situationsâ€”especially if you click around in your
playlist a lot or keep restarting the playerâ€”in which an extra scrobble or two
can be submitted.

=back

Please give feedback or issues at the GitHub site,
L<https://github.com/grifferz/dbus-scrobbler>.

=head1 AUTHOR

Andy Smith <andy-dbus-scrobbler@strugglers.net>

=head1 COPYRIGHT

Copyright Â© 2015 Andy Smith. All rights reserved. This application is free
software. It may be used, redistributed and/or modified under the terms of the
Perl Artistic License. Please see the LICENSE file for more details.

Most of the Last.fm API code copied from Steev Eeriumn's Net::LastFMAPI, under
the terms of the Perl Artistic License.
